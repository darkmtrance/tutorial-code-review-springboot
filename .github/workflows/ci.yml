name: CI Pipeline - Gestión de Productos

# Ejecutar en eventos push y pull_request en las ramas master y feature/product
on:
  push:
    branches:
      - master
      - feature/product
  pull_request:
    branches:
      - master
      - feature/product

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Comprobación de código fuente
    - name: Check out repository
      uses: actions/checkout@v3

    # Configuración de Java
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Configuración de caché de dependencias de Maven
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Construcción y pruebas del proyecto
    - name: Build and Test
      run: mvn clean install

    # Publicación de resultados de pruebas
    - name: Publish Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: target/surefire-reports

  lint-check:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Realizar un análisis de código estático usando Checkstyle (o puedes reemplazarlo con SonarQube)
    - name: Run Checkstyle
      run: |
        mvn checkstyle:check
      continue-on-error: true

    # Publicación de resultados de análisis
    - name: Publish Lint Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: lint-results
        path: target/checkstyle-result.xml
